// -----------------------------------------------------------------------------
// This file contains all application-wide Sass functions.
// -----------------------------------------------------------------------------

/// Native `url(..)` function wrapper
/// @param {String} $base - base URL for the asset
/// @param {String} $type - asset type folder (e.g. `fonts/`)
/// @param {String} $path - asset path
/// @return {Url}
@function asset($base, $type, $path) {
    @return url($base + $type + $path);
}

/// Returns URL to an image based on its path
/// @param {String} $path - image path
/// @param {String} $base [$base-url] - base URL
/// @return {Url}
/// @require $base-url
@function image($path, $base: $base-url) {
    @return asset($base, 'images/', $path);
}

/// Returns URL to a font based on its path
/// @param {String} $path - font path
/// @param {String} $base [$base-url] - base URL
/// @return {Url}
/// @require $base-url
@function font($path, $base: $base-url) {
    @return asset($base, 'fonts/', $path);
}

/// Get a z-index value from a layer name
/// @access public
/// @param {String} $layer - Layerâ€™s name
/// @return {Number}
/// @require $z-indexes
@function z($layer) {
    @return map.get($z-indexes, $layer);
}

/// allows you to pass a list of directions, so that you get bottom left from opposite-direction(top right). It can be useful when dealing with background-position, for instance
@function opposite-direction($directions) {
    $opposite-directions: ();
    $direction-map: (
        'top': 'bottom',
        'right': 'left',
        'bottom': 'top',
        'left': 'right',
        'ltr': 'rtl',
        'rtl': 'ltr',
    );

    @each $direction in $directions {
        $opposite-direction: map.get($direction-map, $direction);
        @if $opposite-direction != null {
            $opposite-directions: list.append(
                $opposite-directions,
                #{$opposite-direction}
            );
        } @else {
            @warn "No opposite direction can be found for `#{$direction}`.";
        }
    }

    @return $opposite-directions;
}

/* 
example use
$direction: opposite-direction(top);
// bottom

$other-direction: opposite-direction(bottom left);
// top right
 */

// Long Shadow
// (https://www.sitepoint.com/ultimate-long-shadow-sass-mixin/)
@function long-shadow(
    $direction,
    $length,
    $color,
    $fade: false,
    $shadow-count: 100
) {
    $shadows: ();
    $conversion-map: (
        to top: 180deg,
        to top right: 135deg,
        to right top: 135deg,
        to right: 90deg,
        to bottom right: 45deg,
        to right bottom: 45deg,
        to bottom: 0deg,
        to bottom left: 315deg,
        to left bottom: 315deg,
        to left: 270deg,
        to left top: 225deg,
        to top left: 225deg
    );

    @if map.has-key($conversion-map, $direction) {
        $direction: map.get($conversion-map, $direction);
    }

    @for $i from 1 through $shadow-count {
        $current-step: ($i * $length / $shadow-count);
        $current-color: if(
            not $fade,
            $color,
            if(
                meta.type-of($fade) == 'color',
                color.mix($fade, $color, ($i / $shadow-count * 100)),
                rgba($color, 1 - $i / $shadow-count)
            )
        );

        $shadows: list.append(
            $shadows,
            (sin(0deg + $direction) * $current-step)
                (cos(0deg + $direction) * $current-step)
                0
                $current-color,
            'comma'
        );
    }

    @return $shadows;
}

/* 
example usage
.foo {
    text-shadow: long-shadow(
        // Shadow should have an angle of 42 degrees
        $direction: 42deg,
        // Shadow should be contain within a 100x100 box
        $length: 100px,
        // Shadow should start this color
        $color: #16a085,
        // To finish this color
        $fade: #1abc9c
    );
}

.bar {
    box-shadow: long-shadow(
        // Shadow should go to bottom right (45deg)
        $direction: to left,
        // With a length of 15em
        $length: 15em,
        // From this color
        $color: #2980b9,
        // To this color
        $fade: #e67e22
    );
}

.baz {
    box-shadow: long-shadow(
        // Shadow should have an angle of 25deg
        $direction: -125deg,
        // Spread on 120px
        $length: 120px,
        // From this color
        $color: #8e44ad,
        // To transparent
        $fade: true,
        // With only 10 shadows
        $shadow-count: 10
    );
}
 */
